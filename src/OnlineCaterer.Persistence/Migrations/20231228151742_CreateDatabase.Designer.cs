// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineCaterer.Persistence;

#nullable disable

namespace OnlineCaterer.Persistence.Migrations
{
    [DbContext(typeof(OnlineCatererDbContext))]
    [Migration("20231228151742_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Hà Nội, Việt Nam",
                            FirstName = "Anh",
                            LastName = "Lê Đức"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Hà Nội, Việt Nam",
                            FirstName = "Nam",
                            LastName = "Trần Minh"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RatingPoint")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Hà Nội, Việt Nam",
                            FirstName = "Anh",
                            LastName = "Vũ Tuấn",
                            RatingPoint = 0,
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "Hà Nội, Việt Nam",
                            FirstName = "Thắng",
                            LastName = "Lê Thành",
                            RatingPoint = 0,
                            Status = false
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("No Description.");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByUserType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "All"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Birthday"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Wedding"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Christmas"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "New Year"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Inauguration"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Ceremony"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Graduation"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("RatingPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FoodId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "perfect dish",
                            CustomerId = 1,
                            FoodId = 1,
                            RatingPoint = 5
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("No Description.");

                    b.Property<bool>("Discontinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByUserType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RatingPoint")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentQuantity = 5,
                            Description = "",
                            Discontinued = false,
                            EventId = 1,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Fried Chicken",
                            RatingPoint = 5,
                            SupplierId = 1,
                            UnitPrice = 499999m
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("No Description.");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByUserType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Cake"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Hamburger"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Banh My"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Pho"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.FoodImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByUserType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = true,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "food_1_avatar.png"
                        },
                        new
                        {
                            Id = 2,
                            Avatar = false,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "food_1.png"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentInformation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("No Description.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Is a classic payment method in which\r\n							the sender directly gives money to the recipient.",
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Is an online payment method\r\n							through the Agribank service.",
                            Name = "Agribank"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Is an online payment method\r\n							through the MB Bank service.",
                            Name = "MB Bank"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Is an online payment method\r\n							through the VietcomBank service.",
                            Name = "VietcomBank"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Welcome");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RatingPoint")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "19 Lê Thanh Nghị, Hai Bà Trưng, Hà Nội.",
                            Introduction = "With a long-standing brand, highly\r\n							appreciated by famous chefs and customers around\r\n							the world. We will provide the perfect service of\r\n							a 5-star hotel at attractive prices.",
                            Name = "Aptech Food",
                            RatingPoint = 5,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Hà Nội, Việt Nam",
                            Introduction = "Lẩu Kiệt where to find the best\r\n							dishes in Vietnam. Come to us, you will have the\r\n							best experiences of your life.",
                            Name = "Lẩu Kiệt",
                            RatingPoint = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("No Description.");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByUserType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "System Manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Delivery Person"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Supplier"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Object", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("No Description.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Objects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Supplier"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Food"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "FoodCategory"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "FoodImage"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Order"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "OrderDetail"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Feedback"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "PaymentMethod"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            Name = "Event"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            Name = "User"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            Name = "Group"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Relationship.GroupPermission", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.HasKey("ActionId", "GroupId", "ObjectId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ObjectId");

                    b.ToTable("GroupPermissions");

                    b.HasData(
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 1
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 2
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 3
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 5
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 9
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 10
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 11
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 1,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 1,
                            ObjectId = 13
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 1
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 2
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 3
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 5
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 7
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 2,
                            ObjectId = 7
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 8
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 9
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 10
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 11
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 2,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 2,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 1
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 2
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 3
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 3,
                            ObjectId = 3
                        },
                        new
                        {
                            ActionId = 1,
                            GroupId = 3,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 3,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 4,
                            GroupId = 3,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 5
                        },
                        new
                        {
                            ActionId = 1,
                            GroupId = 3,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 3,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 4,
                            GroupId = 3,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 7
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 8
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 9
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 11
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 3,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 3,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 1
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 4,
                            ObjectId = 1
                        },
                        new
                        {
                            ActionId = 4,
                            GroupId = 4,
                            ObjectId = 1
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 2
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 3
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 4
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 5
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 6
                        },
                        new
                        {
                            ActionId = 1,
                            GroupId = 4,
                            ObjectId = 7
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 7
                        },
                        new
                        {
                            ActionId = 1,
                            GroupId = 4,
                            ObjectId = 8
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 8
                        },
                        new
                        {
                            ActionId = 1,
                            GroupId = 4,
                            ObjectId = 9
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 9
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 10
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 11
                        },
                        new
                        {
                            ActionId = 2,
                            GroupId = 4,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 3,
                            GroupId = 4,
                            ObjectId = 12
                        },
                        new
                        {
                            ActionId = 4,
                            GroupId = 4,
                            ObjectId = 12
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Relationship.GroupUser", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 5
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Relationship.UserPermission", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActionId", "ObjectId", "UserId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByUserType")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anh.vt@aptechlearning.edu.vn",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Password = "AQAAAAEAAAPoAAAAEGFuaC52dEBhcHRlY2hsZWFybmluZy5lZHUudm4KZhopC6OBugv6p6H+S4fiFA+lE/KpCYnF5B4L5bOabyhSyDA+ihlguzKvcMAPuB0=",
                            PhoneNumber = "0123456789",
                            Status = true,
                            UserId = 1,
                            UserName = "Vũ Tuấn Anh",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thang.lt@aptechlearning.edu.vn",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Password = "AQAAAAEAAAPoAAAAEHRoYW5nLmx0QGFwdGVjaGxlYXJuaW5nLmVkdS52bgQVj79pDxe34f1qzLX/qLGSpiH1zKj7XLnyNpUpGf1sgbei13WxVAUPy08PHUHMxg==",
                            PhoneNumber = "1234567890",
                            Status = true,
                            UserId = 2,
                            UserName = "Lê Thành Thắng",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aptechfood@gmail.com",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Password = "AQAAAAEAAAPoAAAAEGFwdGVjaGZvb2RAZ21haWwuY29tKHvQHil5FeZjG+P3LmQXr22/MOG888d0aG9XqO1LJKNz7MXN2GXktEwZWDezMwf8",
                            PhoneNumber = "0923456789",
                            Status = true,
                            UserId = 1,
                            UserName = "Aptech Food",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kiet.bt@aptechlearning.edu.vn",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Password = "AQAAAAEAAAPoAAAAEGtpZXQuYnRAYXB0ZWNobGVhcm5pbmcuZWR1LnZuwRgwpF2AxUJuwaPZwSpU348oEe7gKRMkAIRe9tsX8eUtbT3F6YW548PeopOzTOht",
                            PhoneNumber = "0956784321",
                            Status = true,
                            UserId = 2,
                            UserName = "Lẩu Kiệt",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anh.ld@aptechlearning.edu.vn",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Password = "AQAAAAEAAAPoAAAAEGFuaC5sZEBhcHRlY2hsZWFybmluZy5lZHUudm4sV+yGAJvwsed/FQ7e9qkd2/q2qKKDw3Hb41AdbhOrFjjcPaw57Wgk+ssxCc8yl4U=",
                            PhoneNumber = "0917236485",
                            Status = true,
                            UserId = 1,
                            UserName = "Lê Đức Anh",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nam.tm@aptechlearning.edu.vn",
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserType = 0,
                            Password = "AQAAAAEAAAPoAAAAEG5hbS50bUBhcHRlY2hsZWFybmluZy5lZHUudm5wMXkIU9kvPQOsa5AYlBfLtBkPmYhIAryrdy4tERo6R4dfrz+sutItWYBpoW2/e/Q=",
                            PhoneNumber = "0193284675",
                            Status = true,
                            UserId = 2,
                            UserName = "Trần Minh Nam",
                            UserTypeId = 2
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Supplier"
                        });
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Feedback", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Core.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.Food", "Food")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Food", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Core.FoodCategory", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.Event", "Event")
                        .WithMany("Foods")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.Supplier", "Supplier")
                        .WithMany("Foods")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.FoodImage", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Core.Food", "Food")
                        .WithMany("Images")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Order", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Core.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.OrderDetail", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Core.Food", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Core.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Relationship.GroupPermission", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Identity.Action", "Action")
                        .WithMany("Groups")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Identity.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Identity.Object", "Object")
                        .WithMany("Groups")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Group");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Relationship.GroupUser", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Identity.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Identity.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Relationship.UserPermission", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Identity.Action", "Action")
                        .WithMany("Users")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Identity.Object", "Object")
                        .WithMany("Users")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCaterer.Domain.Identity.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Object");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.User", b =>
                {
                    b.HasOne("OnlineCaterer.Domain.Identity.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Event", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Food", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.FoodCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Core.Supplier", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Action", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Group", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.Object", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.User", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("OnlineCaterer.Domain.Identity.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
